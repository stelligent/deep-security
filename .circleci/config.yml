version: 2.1

executors:
  python37-executor:
    docker:
      - image: circleci/python:3.7

commands:
  install-test-suite:
    description: Install testing packages
    steps:
      - restore_cache:
          keys:
            - cache-test-{{ checksum "requirements-test.txt" }}

      - run:
          name: Installing testing packages
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements-test.txt

      - save_cache:
          paths:
            - ./venv
          key: cache-test-{{ checksum "requirements-test.txt" }}

  install-sam:
    description: Install AWS SAM
    steps:
      - restore_cache:
          keys:
            - cache-sam-{{ checksum "requirements-sam-cli.txt" }}

      - run:
          name: Installing AWS SAM CLI
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements-sam-cli.txt

      - save_cache:
          paths:
            - ./venv
          key: cache-sam-{{ checksum "requirements-sam-cli.txt" }}

jobs:
  unit-tests:
    executor: python37-executor

    steps:
      - checkout

      - install-test-suite

      - run:
          name: Running unit tests
          command: |
            . venv/bin/activate
            pytest -s -vv --cov=src/rules/

  package:
    executor: python37-executor

    steps:
      - checkout

      - install-sam

      - run:
          name: Copying Deep Security dependencies
          command: |
            for i in rules/*; do
              cp -r src requirements.txt $i
            done

      - run:
          name: Building from source
          command: |
            . venv/bin/activate
            sam build -t deep-security.yml

      - run:
          name: Packaging Lambda functions
          command: |
            . venv/bin/activate
            mkdir -p circleci-ws
            sam package \
              --template-file .aws-sam/build/template.yaml \
              --s3-bucket "$LAMBDA_BUCKET" \
              --s3-prefix "$LAMBDA_PREFIX" \
              --output-template-file circleci-ws/packaged.yml

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Scan cfn template for vulnerabilities (cfn_nag)
          command: |
            docker create -v /templates --name cfn_nag stelligent/cfn_nag /bin/true
            docker cp $PWD/circleci-ws/packaged.yml cfn_nag:/templates
            docker run --volumes-from cfn_nag stelligent/cfn_nag /templates/packaged.yml

      - persist_to_workspace:
          root: circleci-ws
          paths:
            - packaged.yml

  deploy:
    executor: python37-executor

    steps:
      - checkout

      - attach_workspace:
          at: circleci-ws

      - install-sam

      - run:
          name: Deploying Lambda functions and Config rules
          command: |
            . venv/bin/activate
            sam deploy \
              --stack-name "$STACK_NAME" \
              --template-file circleci-ws/packaged.yml \
              --capabilities CAPABILITY_IAM \
              --parameter-overrides \
                ConfigBucket="$CONFIG_BUCKET" \
                ConfigPrefix="$CONFIG_PREFIX" \
                DSUsernameKey="$DS_USERNAME_PARAM_STORE_KEY" \
                DSPasswordKey="$DS_PASSWORD_PARAM_STORE_KEY" \
                DSHostname="$DS_HOSTNAME" \
                DSPort="$DS_PORT" \
                DSTenant="$DS_TENANT" \
                DSIgnoreSslValidation="$DS_IGNORE_SSL_VALIDATION" \
                DSPolicy="$DS_POLICY" \
                DSControl="$DS_CONTROL"

  publish:
    executor: python37-executor

    steps:
      - checkout

      - attach_workspace:
          at: circleci-ws

      - install-sam

      - run:
          name: Publish to AWS Serverless Application Repository
          command: |
            . venv/bin/activate
            sam publish --template circleci-ws/packaged.yml

workflows:
  version: 2

  wf-deploy:
    jobs:
      - unit-tests
      - package:
          requires:
            - unit-tests
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - package
          filters:
            branches:
              only: master

  wf-publish:
    jobs:
      - unit-tests
      - package:
          requires:
            - unit-tests
          filters:
            branches:
              only: master
      - publish:
          requires:
            - package
          filters:
            branches:
              only: master
